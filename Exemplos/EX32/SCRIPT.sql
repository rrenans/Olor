SET SQL_SAFE_UPDATES = 0;
DROP DATABASE IF EXISTS DBPEDIDO;
CREATE DATABASE DBPEDIDO;

USE DBPEDIDO;

CREATE TABLE PRODUTO (
	IDPRODUTO INT NOT NULL AUTO_INCREMENT
    , NOME VARCHAR(45)
    , ESTOQUE INT
	, PRIMARY KEY(IDPRODUTO)
);

CREATE TABLE COMPRA (
	IDCOMPRA INT NOT NULL AUTO_INCREMENT
    , IDPRODUTO INT NOT NULL
	, QTDE INT
    , PRECOUNITARIO NUMERIC(8,2)
    , PRIMARY KEY (IDCOMPRA)
    , FOREIGN KEY (IDPRODUTO) REFERENCES PRODUTO(IDPRODUTO)
);

CREATE TABLE VENDA (
	IDVENDA INT NOT NULL AUTO_INCREMENT
    , IDPRODUTO INT NOT NULL
	, QTDE INT
    , PRECOUNITARIO NUMERIC(8,2)
    , PRIMARY KEY (IDVENDA)
    , FOREIGN KEY (IDPRODUTO) REFERENCES PRODUTO(IDPRODUTO)
);

DELIMITER $$

CREATE TRIGGER TR_AI_COMPRA AFTER INSERT ON COMPRA FOR EACH ROW
BEGIN
	-- RESPOSTA QUESTAO 1
    UPDATE PRODUTO
	SET ESTOQUE  = ESTOQUE + NEW.QTDE
    WHERE IDPRODUTO = NEW.IDPRODUTO;
    
END $$

CREATE TRIGGER TR_AI_VENDA AFTER INSERT ON VENDA FOR EACH ROW
BEGIN
	-- RESPOSTA QUESTAO 2
	UPDATE PRODUTO SET ESTOQUE = ESTOQUE - NEW.QTDE
	WHERE IDPRODUTO = NEW.IDPRODUTO;	
    
END $$

CREATE TRIGGER TR_BD_COMPRA BEFORE DELETE ON COMPRA FOR EACH ROW
BEGIN
	-- RESPOSTA QUESTAO 3
    DECLARE vQTDEESTOQUE INT;
    
    SELECT ESTOQUE
    INTO vQTDEESTOQUE
    FROM PRODUTO
    WHERE IDPRODUTO = OLD.IDPRODUTO;
    
    IF vQTDEESTOQUE < OLD.QTDE THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ESTOQUE INSULFICIENTE PARA EXCLUIR A COMPRA';
    ELSE
		UPDATE PRODUTO
        SET ESTOQUE = ESTOQUE - OLD.QTDE
        WHERE IDPRODUTO = OLD.IDPRODUTO;
    END IF;

END $$

CREATE TRIGGER TR_BU_COMPRA BEFORE UPDATE ON COMPRA FOR EACH ROW
BEGIN
	-- RESPOSTA QUESTAO 6
    DECLARE vQTDEESTOQUE INT;
    
    SELECT ESTOQUE
    INTO vQTDEESTOQUE
    FROM PRODUTO
    WHERE IDPRODUTO = OLD.IDPRODUTO;	
        
    IF NEW.IDPRODUTO <> OLD.IDPRODUTO THEN
		-- QUANDO O PRODUTO FOI ALTERADO
        IF vQTDEESTOQUE < OLD.QTDE THEN
			-- O ESTOQUE FOI VENDIDO E NÃO COMO ALTERAR
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Estoque insulficiente para alterar a compra';
		ELSE
			-- RETIRANDO O PRODUTO ANTIGO
			UPDATE PRODUTO
            SET ESTOQUE = ESTOQUE - OLD.QTDE
            WHERE IDPRODUTO = OLD.IDPRODUTO;
            
            -- ADICIONO O ESTOQUE NO PRODUTO NOVO
            UPDATE PRODUTO
            SET ESTOQUE = ESTOQUE + NEW.QTDE
            WHERE IDPRODUTO = NEW.IDPRODUTO;
            
        END IF;
        
    ELSE
		-- QUANDO O PRODUTO É MESMO
        IF NEW.QTDE >= OLD.QTDE THEN
			UPDATE PRODUTO
            SET ESTOQUE = ESTOQUE + (NEW.QTDE - OLD.QTDE)
            WHERE IDPRODUTO = NEW.IDPRODUTO;
        ELSE 
			IF vQTDEESTOQUE < (OLD.QTDE - NEW.QTDE) THEN
				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Estoque insulficiente para alterar a compra';
			ELSE
				UPDATE PRODUTO
				SET ESTOQUE = ESTOQUE - (OLD.QTDE - NEW.QTDE)
				WHERE IDPRODUTO = NEW.IDPRODUTO;
			END IF;
        END IF;        
    END IF;   

END $$

CREATE TRIGGER TR_BI_VENDA BEFORE INSERT ON VENDA FOR EACH ROW
BEGIN
	-- RESPOSTA QUESTAO 5
	DECLARE vQTDEESTOQUE INT;

	SELECT ESTOQUE
    -- INTO SERVE PARA COLOCAR O VALOR DO CAMPO DA CONSULTA DENTRO DA VARIAVEL INDICADO
    INTO vQTDEESTOQUE
	FROM PRODUTO 
	WHERE IDPRODUTO = NEW.IDPRODUTO;	
    
    IF (vQTDEESTOQUE < NEW.QTDE) THEN 
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ESTOQUE INSULFICIENTE PARA REALIZAR A VENDA';
    END IF;

END $$

CREATE TRIGGER TR_AD_VENDA AFTER DELETE ON VENDA FOR EACH ROW
BEGIN
	-- RESPOSTA QUESTAO 4
	UPDATE PRODUTO
    SET ESTOQUE = ESTOQUE + OLD.QTDE
    WHERE IDPRODUTO = OLD.IDPRODUTO;

END $$

CREATE TRIGGER TR_BU_VENDA BEFORE UPDATE ON VENDA FOR EACH ROW
BEGIN
	-- RESPOSTA QUESTAO 7
	DECLARE vQTDEESTOQUE INT;

	SELECT ESTOQUE
    INTO vQTDEESTOQUE
	FROM PRODUTO 
	WHERE IDPRODUTO = NEW.IDPRODUTO;	

	IF NEW.IDPRODUTO <> OLD.IDPRODUTO THEN
		-- QUANDO FOR TROCADO O PRODUTO
        IF vQTDEESTOQUE < NEW.QTDE THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Estoque insulficiente para alterar a venda';
        ELSE
			-- devolvendo para o estoque o produto antigo
            UPDATE PRODUTO
            SET ESTOQUE = ESTOQUE + OLD.QTDE
            WHERE IDPRODUTO = OLD.IDPRODUTO;
        
			-- retirar do estoque o produto novo
			UPDATE PRODUTO
            SET ESTOQUE = ESTOQUE - NEW.QTDE
            WHERE IDPRODUTO = NEW.IDPRODUTO;
		END IF;
    ELSE
		-- QUANDO não FOR TROCADO O PRODUTO
        IF (NEW.QTDE <= OLD.QTDE) THEN
			UPDATE PRODUTO
            SET ESTOQUE = ESTOQUE + (OLD.QTDE - NEW.QTDE)
            WHERE IDPRODUTO = NEW.IDPRODUTO;
		ELSE
			IF vQTDEESTOQUE < (NEW.QTDE - OLD.QTDE) THEN
				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Estoque insulficiente para alterar a venda';
            ELSE
				UPDATE PRODUTO
                SET ESTOQUE = ESTOQUE - (NEW.QTDE - OLD.QTDE)
                WHERE IDPRODUTO = NEW.IDPRODUTO;
            END IF;       
        END IF;
        
    END IF;

END $$

DELIMITER ;

-- 
INSERT INTO PRODUTO (NOME, ESTOQUE)VALUES('REFRIGERANTE', 0);
INSERT INTO COMPRA(IDPRODUTO, QTDE, PRECOUNITARIO)VALUES(1, 5, 10);
INSERT INTO VENDA(IDPRODUTO, QTDE, PRECOUNITARIO)VALUES(1, 2, 10);


SELECT * FROM PRODUTO ;
SELECT * FROM COMPRA;
SELECT * FROM VENDA;



